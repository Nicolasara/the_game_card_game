// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	proto "the_game_card_game/proto"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/go-redis/redis/v8"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Storer) Close() {
	_m.Called()
}

// CreateGame provides a mock function with given fields: ctx, gameID, playerID
func (_m *Storer) CreateGame(ctx context.Context, gameID string, playerID string) error {
	ret := _m.Called(ctx, gameID, playerID)

	if len(ret) == 0 {
		panic("no return value specified for CreateGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, gameID, playerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGameForTest provides a mock function with given fields: ctx, gameID
func (_m *Storer) GetGameForTest(ctx context.Context, gameID string) (bool, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetGameForTest")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameState provides a mock function with given fields: ctx, gameID
func (_m *Storer) GetGameState(ctx context.Context, gameID string) (*proto.GameState, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetGameState")
	}

	var r0 *proto.GameState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*proto.GameState, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *proto.GameState); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GameState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishGameUpdate provides a mock function with given fields: ctx, gameID
func (_m *Storer) PublishGameUpdate(ctx context.Context, gameID string) error {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for PublishGameUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveMove provides a mock function with given fields: ctx, gameID, playerID, card, pileID
func (_m *Storer) SaveMove(ctx context.Context, gameID string, playerID string, card int, pileID string) error {
	ret := _m.Called(ctx, gameID, playerID, card, pileID)

	if len(ret) == 0 {
		panic("no return value specified for SaveMove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string) error); ok {
		r0 = rf(ctx, gameID, playerID, card, pileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToGameUpdates provides a mock function with given fields: ctx, gameID
func (_m *Storer) SubscribeToGameUpdates(ctx context.Context, gameID string) (<-chan *redis.Message, func(), error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToGameUpdates")
	}

	var r0 <-chan *redis.Message
	var r1 func()
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan *redis.Message, func(), error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan *redis.Message); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *redis.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) func()); ok {
		r1 = rf(ctx, gameID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, gameID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateGameState provides a mock function with given fields: ctx, gameID, state
func (_m *Storer) UpdateGameState(ctx context.Context, gameID string, state *proto.GameState) error {
	ret := _m.Called(ctx, gameID, state)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGameState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *proto.GameState) error); ok {
		r0 = rf(ctx, gameID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

